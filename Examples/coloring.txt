node(a).
node(b).
node(c).
node(d).
node(e).

edge(a,e).
edge(a,b).
edge(b,c).
edge(c,d).
edge(e,c).
edge(e,d).

edge(X,Y) :- edge (Y,X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

color(red).
color(blue).
color(green).

% assigned(Node, Color) - "The given node is assigned the given color"
%assigned(N,C) | -assigned(N,C) :- node(N), color(C).

% assigned(Node, Color) - "The given node is assigned the given color"
% for every node N generate exactly 1 fact of the form: assigned(N,C) where C is a color
% numbers (ones) are lower and upper bound
1{assigned(N,C) : color(C)}1 :- node(N).

%unassigned(N) :- not assigned(N,_), node(N).

% 1 node has exactly 1 color
%:- assigned(N,C1), assigned(N,C2), C1 != C2,
%    node(N), color(C1), color(C2).

% 1 node has exactly 1 color
%-assigned(N, C1) :-
%    assigned(N,C2),
%    C1 != C2,
%    node(N), color(C1), color(C2).

% impossible to have a colorless node
%:- unassigned(N), node(N).

adjacent(N1, N2) :- edge(N1, N2).

% adjacent nodes can't have same color
:- assigned(N1,C), assigned(N2,C), adjacent(N1,N2), color(C).

#show assigned/2.
#show unassigned/2.